package com.hospitalsearch.service.impl;

import com.hospitalsearch.entity.User;
import com.hospitalsearch.service.MailService;
import org.apache.log4j.LogManager;
import org.apache.log4j.Logger;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.core.env.Environment;
import org.springframework.mail.javamail.JavaMailSenderImpl;
import org.springframework.mail.javamail.MimeMessageHelper;
import org.springframework.stereotype.Service;
import org.springframework.ui.velocity.VelocityEngineUtils;
import org.springframework.web.servlet.view.velocity.VelocityConfigurer;

import javax.mail.MessagingException;
import javax.mail.internet.MimeMessage;
import javax.servlet.ServletContext;
import javax.servlet.http.HttpServletRequest;
import java.util.HashMap;
import java.util.Map;

/**
 * @author Andrew Jasinskiy on 19.06.16
 */
@Service
public class MailServiceImpl implements MailService {

    private final Logger logger = LogManager.getLogger(UserServiceImpl.class);

    @Autowired
    private ServletContext context;

    @Autowired
    private HttpServletRequest request;

    @Autowired
    private JavaMailSenderImpl mailSender;

    @Autowired
    private VelocityConfigurer configurer;

    @Autowired
    private Environment properties;

    @Override
    public void sendMessage(User user, String subject, String text, String templateName) {

        String encoding = properties.getProperty("email.encoding");
        MimeMessage message = mailSender.createMimeMessage();
        MimeMessageHelper messageHelper = new MimeMessageHelper(message, encoding);
        Map<String, Object> hTemplateVariables = new HashMap<>();
        hTemplateVariables.put("message", text);
        try {
            messageHelper.setFrom(mailSender.getUsername());
            messageHelper.setTo(user.getEmail());
            messageHelper.setSubject(subject);
            String emailBody = VelocityEngineUtils.mergeTemplateIntoString(configurer.getVelocityEngine(), templateName, encoding, hTemplateVariables);
            message.setContent(emailBody, "text/html");
            synchronized (message) {
                mailSender.send(message);
            }
        } catch (MessagingException e) {
            logger.error(e);
        }
    }

    @Override
    public String createBannedMessage(User user) {
        return "Dear, " + user.getEmail() + ". We would like to inform you that your account has been blocked." +
                "For further details please contact us by mail ch039mail@gmail.com";
    }

    private String buildConfirmationURL(String token, String path) {
        return "https://" + request.getServerName() + ":" + request.getServerPort() + context.getContextPath()
                + path + token;
    }

    @Override
    public String createRegisterMessage(User user, String token) {
        return "Hello, " + user.getEmail() + ". Welcome to Chernivtsi Hospitals. To activate your account please<a href=\'" +
                buildConfirmationURL(token, "/confirmRegistration?token=") + "\'> click here</a>. ";
    }

    @Override
    public String createResetPasswordMessage(User user, String token) {
        return "Hello, " + user.getEmail() + ". This is an automated message generated by Chernivtsi Hospitals " +
                "account administration to help you reset your password. " +
                "To change your account password please<a href=\'" + buildConfirmationURL(token, "/confirmResetPassword?token=") +
                "\'> click here</a>. If you did not request a password change, please ignore this message.";
    }
}
