package com.hospitalsearch.service.impl;

import com.hospitalsearch.entity.User;
import com.hospitalsearch.service.MailService;
import org.apache.log4j.LogManager;
import org.apache.log4j.Logger;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.mail.MailException;
import org.springframework.mail.javamail.JavaMailSender;
import org.springframework.mail.javamail.MimeMessageHelper;
import org.springframework.stereotype.Service;

import javax.mail.MessagingException;
import javax.mail.internet.MimeMessage;
import javax.servlet.ServletContext;
import javax.servlet.http.HttpServletRequest;

/**
 * @author Andrew Jasinskiy on 19.06.16
 */
@Service
public class MailServiceImpl implements MailService {

    private final Logger logger = LogManager.getLogger(UserServiceImpl.class);

    @Autowired
    private ServletContext context;

    @Autowired
    private HttpServletRequest request;

    @Autowired
    private JavaMailSender mailSender;

    /*
    @Autowired
    private VelocityConfigurer configurer;

    @Autowired
    private Environment properties;*/

    @Override
    public void sendMessage(User user, String subject, String text) {
        boolean send = false;
        MimeMessage message = mailSender.createMimeMessage();
        MimeMessageHelper helper = new MimeMessageHelper(message);
        try {
            helper.setTo(user.getEmail());
            helper.setText(text, true);
            helper.setSubject(subject);
        } catch (MessagingException e) {
            logger.error(e);
        }
        while (!send) {
            try {
                synchronized (message) {
                    mailSender.send(message);
                    send = true;
                }
                logger.debug("Message " + message + "sended");
            } catch (MailException e) {
                logger.error(e);
            }
        }
    }

    @Override
    public String createRegisterMessage(User user, String token) {
        String confirmationUrl = buildConfirmationURL(token, "/confirmRegistration?token=");
        StringBuilder messageBuilder = new StringBuilder("Hello, " + user.getEmail() + ". Welcome to Chernivtsi Hospitals.");
        messageBuilder.append("To active your account please<a href=\'" + confirmationUrl + "\'> click here</a>. ");
        return messageBuilder.toString();
    }

    private String buildConfirmationURL(String token, String path) {
        return "https://" +  request.getServerName() + ":" + request.getServerPort() + context.getContextPath()
                + path + token;
    }

    @Override
    public String createResetPasswordMessage(User user, String token) {
        String resetPasswordUrl = buildConfirmationURL(token, "/confirmResetPassword?token=");
        StringBuilder messageBuilder = new StringBuilder("Hello, " + user.getEmail() + ".");
        messageBuilder.append("This is an automated message generated by Chernivtsi Hospitals account administration to help you reset your password.");
        messageBuilder.append("To change your account password please<a href=\'" + resetPasswordUrl + "\'> click here</a>. ");
        messageBuilder.append("If you did not request a password change, please ignore this message");
        return messageBuilder.toString();
    }

    @Override
    public String createBannedMessage(User user) {
        StringBuilder bannedInfo = new StringBuilder("Dear, " + user.getEmail() + ".We would like to inform you that your account has been blocked.");
        bannedInfo.append("For further details please contact us by mail ch039mail@gmail.com");
        return bannedInfo.toString();
    }



/*    String resetPasswordUrl = "https://" + context.getVirtualServerName() + ":8443" + context.getContextPath()
            + "/confirmResetPassword?token=" + token;*/

   /* @Override
    public void createMessage(String emailTo, String subject, String templateName, Map<String, Object> map) {
        String encoding = properties.getProperty("email.encoding");
        MimeMessage message = mailSender.createMimeMessage();
        MimeMessageHelper messageHelper = new MimeMessageHelper(message, encoding);
        try {
            messageHelper.setFrom(mailSender.getUsername());
            messageHelper.setTo(emailTo);
            messageHelper.setSubject(subject);

            String emailBody = VelocityEngineUtils.mergeTemplateIntoString(configurer.getVelocityEngine(), templateName, encoding, map);
            message.setContent(emailBody, "text/html");
            mailSender.send(message);

        } catch (MessagingException e) {
            System.out.println(e.getMessage());
        }
    }*/
}
